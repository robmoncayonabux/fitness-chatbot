import { addKeyword, EVENTS } from "@bot-whatsapp/bot";
import AIClass from "src/ai/ai.class";
import {
	clearHistory,
	handleHistory,
	getHistoryParse,
} from "../utils/handleHistory";
import GoogleSheetService from "src/services/sheet.js";

const googleSheet = new GoogleSheetService(
	"1YgBJtpwwtfJlUzgzuPS-M6Z2CMGXvhFZ90ojH6300fs"
);

const generateJsonParseForPayment = (history: any, name: string, email: string, identificacion: string, cellphone: string, products: any) => {
	const prompt = `Basado en el historial de conversaci√≥n: ${history}
    Analiza la informaci√≥n proporcionada y genera un objeto JSON para el proceso de pago, estrictamente siempre debera tener la siguente sintaxis en ingles.

		el json lo har√°s comparando esos datos con los siguientes datos siempre con estos datos guardar√°s el pedido, con el precio y nombre correspondiente
		${products}

		--------------------------------------------------------
		ejemplo de sintaxis
			client: {
				name: "John Doe",
				email: "hola@ejemplo.com"
				identification: "1234567890",
				cellphone: "1234567890"
				orderItems: [
					{
						name: "Omega 3",
						quantity: 1,
						price: 10.00
					}
				]
			}
		--------------------------------------------------------

    Datos del Cliente:
    - nombre: "${name}"
    - email: "${email}"
    - identificacion: "${identificacion}"
		- celular: "${cellphone}
    
    Objeto JSON a generar para el pago:`;

	return prompt;
};

/**
 * Flujo para manejar el proceso de pago
 */
const confirmFlow = addKeyword("pay")
	.addAction(async (_, { state, flowDynamic }) => {
		await flowDynamic("Por favor, introduce tu email:");
		await handleHistory(
			{ role: "system", content: "Por favor, introduce tu email:" },
			state
		);
	})
	.addAction(
		{ capture: true },
		async (ctx, { state, flowDynamic, fallBack }) => {
			if (ctx.body.includes("@") && ctx.body.includes(".")) {
				await state.update({ email: ctx.body });
				await handleHistory({ role: "user", content: ctx.body }, state);
				await flowDynamic("Ahora, necesito tu nombre:");
				await handleHistory(
					{ role: "system", content: "Ahora, necesito tu nombre:" },
					state
				);
			} else {
				return fallBack(
					"El email proporcionado no es v√°lido. Por favor, introduce un email v√°lido:"
				);
			}
		}
	)
	.addAction(
		{ capture: true },
		async (ctx, { state, flowDynamic, fallBack }) => {
			if (ctx.body.trim().split(" ").length > 1) {
				await state.update({ name: ctx.body.trim() });
				await handleHistory(
					{ role: "user", content: ctx.body.trim() },
					state
				);
				await flowDynamic("Por √∫ltimo, ingresa tu c√©dula:");
				await handleHistory(
					{
						role: "system",
						content: "Por √∫ltimo, ingresa tu c√©dula:",
					},
					state
				);
			} else {
				return fallBack(
					"Por favor, introduce tu nombre y apellido:"
				);
			}
		}
	)
	.addAction(
		{ capture: true },
		async (ctx, { state, flowDynamic, fallBack }) => {
			if (ctx.body.trim().length > 8) {
				await state.update({ identification: ctx.body.trim() });
				await handleHistory(
					{ role: "user", content: ctx.body.trim() },
					state
				);
				await flowDynamic(
					"Gracias por proporcionar tus datos, estoy generando tu link de pago"
				);
				await handleHistory(
					{
						role: "system",
						content:
							"Gracias por proporcionar tus datos, estoy generando tu link de pago",
					},
					state
				);
			} else {
				return fallBack(
					"La c√©dula debe tener m√°s de 8 d√≠gitos. Por favor, reintroduce tu c√©dula:"
				);
			}
		}
	)
	.addAction(async (ctx, { state, flowDynamic, extensions }) => {
		const email = state.get("email");
		const name = state.get("name");
		const identification = state.get("identification");
		const cellphone = ctx.from; 
		const products = await googleSheet.getAllProducts();
		
		
		const productsString = products.map(p => `${p.NAME} a ${p.PRICE}`).join('\n ');
	
		const history = getHistoryParse(state);
		console.log('historial', history);
		
		const ai = extensions.ai as AIClass;
		const prompt = generateJsonParseForPayment(
			history,
			name,
			email,
			identification,
			cellphone,
			productsString,
		);
	
		
		const jsonPaymentInfo = await ai.createChat([
			{ role: "system", content: prompt },
		]);


		console.log(`JSON para Pago:...... \n ${jsonPaymentInfo}`);
		const paymentInfo = JSON.parse(jsonPaymentInfo);
		const client = paymentInfo.client;

		console.log('client', client);

		try {
			const data = {
				name: name,
				email: email,
				identification: identification,
				cellphone: cellphone,
				orderItems: client.orderItems,
			}
			console.log('data from flow', data);
			await googleSheet.saveOrder(data);
		} catch (error) {
			console.error("Error al guardar la orden:", error);
		}
		
		// clearHistory(state);
		console.log('Historial de conversaci√≥n limpio', state.getAllState());
	
		
		await flowDynamic('Listo!, tu pedido se agend√≥, pronto un agente se contactar√° contigo para hacer la entrega. Gracias por tu compra! üçïüöÄüéâ');
	});
	

export { confirmFlow };